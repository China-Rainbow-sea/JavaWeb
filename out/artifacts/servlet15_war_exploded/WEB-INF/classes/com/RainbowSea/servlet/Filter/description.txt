当前 oa项目存在的缺陷 ?

DeptServlet,EmpServlet,OrderServlet 每一个servlet都是处理自己相关的业务，在这些
Servlet执行之前都是需要判断用户是否登录了，如果用户登录了，可以继续操作，如果没有登录，
需要用户登录，这段判断用户是否登录的代码是固定的，并且在每一个Servlet类当中都需要编写，
显然代码没有得到很好的复用，包括每一个Servlet 都要解决中文乱码的问题，
也有公共代码，这些代码目前都是重复编写，并没有到达复用，怎么解决？

可以使用Servlet 规范中的Filter来解决这个问题:
 > Filter 是过滤器
 > Filter 可以在Servlet 这个目标程序执行之前添加代码，也可以在目标Servlet 执行之后添加代码，之前之后都可以添加过滤规则。
 > 一般情况下，都是在过滤器当中编写公共代码。
一个过滤器怎么写呢？
: 第一步:编写一个java类实现一个接口：jarkata.servlet.Filter，并且实现这个接口当中所有的方法。

Filter 当中的方法：
 > init() 方法：在Filter对象第一次出创建之后调用，并且只会调用一次。
 > doFilter()：只要用户发送一次请求(注意响应也是算请求的)，则执行一次，发送N次请求，则执行N次。在这个方法中编写过滤规则。
 > destroy()方法：在Filter对象销毁/释放之前调用，并且只调用一次。


Servlet 对象默认情况下，在服务器启动的时候是不会新键对象的
 Filter 对象默认情况下，在服务器启动的时候会新建对象的。
 Servlet 是单例，Filter 也是单例，不过都是假单例的。

 目标Servlet 是否执行，取决于两个条件:
 第一: 在过滤器当中是否编写了: chain.doFilter(request,response) 代码，
 第二: 用户发送的请求路径是和Servlet的请求路径一样的。

 chain.doFilter(request,response) 这行代码的作用：
  > 执行一条过滤器，如果下面没有过滤器了，执行最终的Servlet
 注意:Filter 的优先级，天生的就是比Servlet 优先级高.
 > /a.do 对应一个Filter ，也对应一个Servlet,那么一定是先执行filter,然后再执行Servlet.

 关于 Filter 的配置路径:
 /a.do,/b.do /dept/save 这些配置方式都是精确匹配。
 /* 匹配所有路径；
 *.do 后缀匹配，不要以 / 开始。
 /dept/* 前置匹配.


 在web.xml 文件中进行配置的时候，Filter 的执行顺序是什么？
 依靠filter-mapping标签的配置位置，越靠上优先级越高。
 过滤器的调用顺序，遵循栈数据结构:
 使用@WebFilter的时候，Filter的执行顺序是怎样的呢？
 执行顺序，是比Filter这个类名
 比如:Filter1 和 Filter2 ，则先执行Filter1


 Filter 的生命周期:
 和Servlet 对象生命周期一致。
 唯一的区别: Filter默认情况下，在服务器启动阶段就实例化。Servlet 不会
 /a AServlet AFilter

 Filter 过滤器这里有一个设计模式:
 > 责任链设计模式
 > 过滤器最大的优点:
                    在程序编译阶段不会确定调用顺序，因为Filter的调用顺序是配置
                    到web.xml 文件中的，只要修改web.xml 配置文件中的filter-mapping的顺序就可以了
                    整Filter的执行顺序，显然Filter的执行顺序是在程序运行阶段动态组合的，那么这种设计模式被称为是责任链设计模式。

 责任链设计模式最大的核心思想:
   在程序运行阶段，动态的组合程序的调用顺序。



