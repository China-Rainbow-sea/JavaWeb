

什么是Servlet 对象的生命周期:
Servlet 对象的生命周期表示：一个Servlet对象从出生在最后的死亡，整个过程是怎样的 .

Servlet 对象是由谁来维护的
Servlet 对象的创建，对象上方法调用，对象最终的销毁，Javaweb程序员是无权干涉的
Servlet 对象的生命周期是由 Tomcat 服务器(Web Server) 全权负责的
Tomcat 服务器通常我们又称为 ：Web 容器，这个叫法你要知道 Web Container
注意 ：服务器在启动 Servlet 对象时没有创建出来的：
服务器在启动的时候Servlet 对象并不会被实例化(这里的实例化是通过读取web.xml 配置文件中的 全限定类名，通过反射创建的)
这个设计是合理的，用户没有发送请求之前，如果提前创建出来所有的 Servlet 对象，必然是耗费内存的，并且创建出来的Servlet
如果一直没有用户访问，显然这个Servlet 对象是一个废物，没必要创建了。

怎么让服务器启动的时候创建Servlet 对象呢
在servlet 标签中添加  <load-on-startup>1</load-on-startup> 子标签，在该子标签中填写整数，越小的整数优先级越高

init()
重点:
  1.用户在发送第一次请求的时候 Servlet 被实例化(AServlet的构造器就被执行了)
  2.AServlet对象被创建出来之后，Tomcat 服务器马上调用了 AServlet 对象的 init方法，（init方法在执行的时候，
  AServlet 对象已经是存在了的，已经被创建出来的。
  3.用户发送第一次请求的时候，Init 方法执行之后，Tomcat 服务器马上调用AServlet对象的service 方法
  4.用户继续发送第二次请求：控制台输出内容：用户在发送第二次，第三次，或者第四次的时候，Servlet 对象并没有新建
  还是使用之前创建的 Servlet 对象，直接调用该Servlet对象的service方法，这说明：
    第一:Servlet 对象是单向(单实例的，但是要注意：Servlet 对象是单实例的，但是Servlet类并不符合单例模式，
    因为单例模式的构造器是private私有的，而这里确实public 。所以我们称之为假单例) 之所以单例是因为
    Servlet 对象的创建我们javaweb程序员是管不着，这个对象的创建只能是Tomcat 来说的算。
    Tomcat 只创建一个，所以导致了单例，但是属于假单例，真单例模式，构造器是私有化的
    第二：无参构造器，init 方法只在第一次用户发送请求的时候执行，也就是说无参构造器只执行一次，init方法
    也只被Tomcat 服务器调用一次。
    第三：只要用户发送一次请求：service 方法必然会被Tomcat服务器调用一次，发送 100次请求，service方法
    会调用100次。

  5. destroy() 方法是在服务器关闭的时候调用的。因为服务器关闭的时候要销毁AServlet 对象的内存。
  服务器在销毁AServlet对象内存之前，Tomcat 服务器会自动调用AServlet 对象的destroy()方法
  注意：destroy()方法调用的时候，Servlet 对象并没有被销毁 :因为 destroy()是一个对象方法，想要
  调用这个对象方法，必须要是Servlet 对象，所以Servlet对象还在，没有被销毁 .
  当destroy()方法执行结束之后，AServlet对象的内存才会被Tomcat对象释放。


  Servlet 对象像一个人一生：
   Servlet 的无参构造器方法执行：标志者你的出生
   Servlet对象的init方法的执行：标志着你正在接受教育。
   Servlet对象的Service 方法的执行：标志着你已经开始工作了，已经开始为人类提供服务了
   Servlet对象的destroy方法的执行：标志着临终。


  Servlet 类中方法的调用次数
   1.构造器只执行一次
   2.init 方法只执行一次
   3.service方法：用户发送一次请求则执行一次，发送N次请求则执行N次。
   4.destroy 方法只执行一次。


 当我们Servlet 类中编写一个有参数的构造器，如果没有手动编写无参构造器会出现如下问题：
   > 报错了 500 错误
   > 注意：500是一个Http协议的错误状态码
   > 500 一般情况下是因为服务器端的 java 程序出现了异常。（服务端的错误都是500错误：服务器内部错误）
   > 如果没有无参数的构造器，会导致出现 500 错误，无法通过反射实例化Servlet对象（全限定类名）
   > 所以，一定要注意：在Servlet 开发当中共，不建议程序员来定义构造方法。因为定义不当，一不小心
   就会导致无法实例化Servlet 对象。


  思考：Servlet 的无参构造器是在对象第一次创建的时候执行的，并且只执行一次，init 方法也是在对象第一次创建的时候，
  执行，并且只执行一次，那么这个无参数构造器可以代替init方法吗？
   > 不能
   > Servlet 规范中有要求：作为javaweb程序员，编写Servlet 类的时候，不建议手动编写构造器，因为编写构造器，】
   很容易让无参构造器消失，这个操作可能会导致Servlet 对象无法实例化了。所以init()方法是有存在的必要的

  > init , service destroy 方法中使用最多的是哪个方法
   使用最多就是 service ()方法，service()方法是一定要实现的，因为service 方法是处理用户请求的核心方法。
   什么时候使用 init()方法： init()方法很少用，通常 init()方法当中做初始化操作，并且这个初始化操作只要执行一次，例如：初始化数据库连接池，初始化线程池
  > 什么时候使用destroy()方法呢
    destroy()方法也很少用.
    通常在destroy()方法当中，进行资源的关闭，马上对象要被销毁了，还有什么没有关闭的，抓紧时间关闭资源，还有什么
    资源没保存的，抓紧时间保存一下。


  我们编写一个Servlet 类直接实现Servlet 接口有什么缺点
     > 我们只需要service()方法，其他方法大部分情况下是不需要使用的，代码很丑陋
     > 适配器设计模式 Adapter
       手机直接插到220V的电压上，手机直接就报废了，怎么办，可以找一个充电器，这个充电器就是一个适配器，手机连接
       适配器，适配器连接220V的电压上，这样就解决了。


  思考：GenericServelt 类是否需要改造一下：
  思考：我提供了一个GenericServelt 之后，init 方法还会执行吗？
   > 还会执行,会执行GenericServlet 类中的 init()方法
  思考:init() 方法是谁调用 ?
   > Tomcat 服务器调用的

  思考第三个问题: init()方法中的ServletConfig 对象是谁创建的，是谁传过来的
   > 都是 Tomcat 干的
   > Tomcat 服务器先创建了 ServletConfig 对象，然后调用ServletConfig 对象传给 init方法。




